# -*- coding: utf-8 -*-
"""NM PROJECT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c4TTwf9uboQWAESH-KNLQ4FeNHtNPXqm
"""

!pip install transformers torch gradio PyPDF2 -q

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM
import PyPDF2

# Define the requirement analysis function
def requirement_analysis(pdf_file, prompt):
    if pdf_file:
        with open(pdf_file.name, "rb") as f:
            reader = PyPDF2.PdfReader(f)
            pdf_text = ""
            for page in reader.pages:
                pdf_text += page.extract_text()
        return f"Extracted PDF content: {pdf_text[:200]}..."  # Example analysis
    elif prompt:
        return f"Analyzing prompt: {prompt}"
    return "Please provide a PDF or a prompt."

# Define the code generation function
def code_generation(prompt, language):
    # Logic to generate code based on the prompt and language
    return f"Generated {language} code based on: {prompt}"

custom_css = """
body, .gradio-container {
    background: linear-gradient(135deg, #0f2027, #203a43, #2c5364);
    color: #f1f1f1;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}
.gr-markdown {
    background: rgba(44, 83, 100, 0.85);
    padding: 20px;
    border-radius: 12px;
    box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
    color: #e0e0e0;
    font-weight: 600;
}
.gr-button {
    background: linear-gradient(90deg, #56ab2f, #a8e063);
    border-radius: 10px;
    font-weight: bold;
    color: #fff;
    box-shadow: 0 4px 15px 0 rgba(56, 218, 102, 0.75);
    transition: all 0.3s ease-in-out;
}
.gr-button:hover {
    filter: brightness(1.1);
    transform: scale(1.05);
}
.gr-textbox, .gr-file, .gr-dropdown {
    background: rgba(255, 255, 255, 0.06);
    border-radius: 8px;
    border: 1px solid #58a500;
    color: #e1f7d5;
    font-weight: 500;
}
"""

with gr.Blocks(css=custom_css) as app:
    gr.Markdown("# AI Code Analysis & Generator")
    gr.Markdown("Upload your PDF or enter requirements, then analyze or generate code with AI-powered assistance.")

    with gr.Tabs():
        with gr.TabItem("Code Analysis"):
            with gr.Row():
                with gr.Column():
                    pdf_upload = gr.File(label="Upload PDF", file_types=[".pdf"])
                    prompt_input = gr.Textbox(
                        label="Or write requirements here",
                        placeholder="Describe your software requirements...",
                        lines=5
                    )
                    analyze_btn = gr.Button("Analyze")
                with gr.Column():
                    analysis_output = gr.Textbox(label="Requirements Analysis", lines=20)
            analyze_btn.click(requirement_analysis, inputs=[pdf_upload, prompt_input], outputs=analysis_output)

        with gr.TabItem("Code Generation"):
            with gr.Row():
                with gr.Column():
                    code_prompt = gr.Textbox(
                        label="Code Requirements",
                        placeholder="Describe what code you want to generate...",
                        lines=5
                    )
                    language_dropdown = gr.Dropdown(
                        choices=["Python", "JavaScript", "Java", "C++", "C#", "PHP", "Go", "Rust"],
                        label="Programming Language",
                        value="Python"
                    )
                    generate_btn = gr.Button("Generate Code")
                with gr.Column():
                    code_output = gr.Textbox(label="Generated Code", lines=20)
            generate_btn.click(code_generation, inputs=[code_prompt, language_dropdown], outputs=code_output)

app.launch(share=True)